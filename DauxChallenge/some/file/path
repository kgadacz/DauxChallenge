using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Some.File.Path
{
    public class EncryptController : Controller
    {
        public async Task<IActionResult> EncryptApiAsync(HttpRequest request)
        {
            // Verificar si el header Authorization est√° presente
            if (!request.Headers.TryGetValue("Authorization", out var authorizationHeader))
            {
                return new JsonResult(new { result = "Unauthorized" }) { StatusCode = 401 };
            }

            // Leer el cuerpo de la solicitud
            using var reader = new StreamReader(request.Body);
            var body = await reader.ReadToEndAsync();
            var jsonData = JsonConvert.DeserializeObject<Dictionary<string, string>>(body);

            // Verificar que el JSON contenga los campos necesarios
            if (!jsonData.ContainsKey("nombre") || !jsonData.ContainsKey("apellido"))
            {
                return new JsonResult(new { result = "Bad Request" }) { StatusCode = 400 };
            }

            // Concatenar nombre y apellido y codificar en base64
            var nombreApellido = jsonData["nombre"] + jsonData["apellido"];
            var expectedAuthorization = Convert.ToBase64String(Encoding.UTF8.GetBytes(nombreApellido));

            // Comparar el header Authorization con el valor esperado
            if (authorizationHeader != expectedAuthorization)
            {
                return new JsonResult(new { result = "Unauthorized" }) { StatusCode = 401 };
            }

            // Devolver resultado "OK" si todo es correcto
            return new JsonResult(new { result = "OK" });
        }
    }
} 